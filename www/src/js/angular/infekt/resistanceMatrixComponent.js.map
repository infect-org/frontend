{"version":3,"sources":["www/src/js/angular/infekt/resistanceMatrixComponent.es2015.js"],"names":["ResistanceMatrixController","$element","changesObj","filters","bacteria","antibiotics","resistances","length","_updateVisibility","_handleDataUpdate","console","log","time","_data","forEach","bacterium","match","_matchesFilter","hidden","visibleAntibioticIndexes","cell","index","antibiotic","push","firstRow","ab","abIndex","indexOf","diagnosisFilter","diagnosis","allValidBacteria","Object","keys","type","containers","id","timeEnd","_matrix","updateData","item","filterTypes","matchesAllFilters","some","filtersForType","isInFilterType","filter","inContainer","find","container","intermediateData","_remodelMatrix","empty","infect","ResistanceMatrix","columnHeaderTransformer","data","map","columnLabelValue","name","columnIdentifier","rowDataTransformer","rowIdentifier","cellColorValue","color","colorValue","invertedColorValue","saturation","lightness","hue","rgb","hslToRgb","Math","round","cellLabelValue","labelValue","rowLabelValue","latinName","rowHidden","columnHidden","remodeled","sortedAntibiotics","sort","a","b","row","resistance","col","value","error","$inject","angular","module","component","controller","bindings"],"mappings":"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","file":"resistanceMatrixComponent.es2015.js","sourcesContent":["(() => {\n\n\t/* global angular, infect */\n\n\tclass ResistanceMatrixController {\n\n\t\tconstructor($element) {\n\t\t\tthis.$element = $element;\n\t\t}\n\n\n\n\t\t/**\n\t\t* Change handler for the component's bindings\n\t\t*/\n\t\t$onChanges(changesObj) {\n\n\t\t\t// Filters changed: Update visibility – but only if data is available. If it's not, \n\t\t\t// there's no need to filter, as table is empty.\n\t\t\tif (changesObj.filters && (this.bacteria && this.antibiotics && this.resistances) && (this.bacteria.length && this.antibiotics.length && this.resistances.length)) {\n\t\t\t\tthis._updateVisibility();\n\t\t\t}\n\n\t\t\t// Change concerns the data property:\n\t\t\t// Upgrade data to have the format that ResistencyMatrix requires\n\t\t\t// Ignore empty data\n\t\t\tif ((changesObj.resistances || changesObj.bacteria || changesObj.antibiotics) && (this.antibiotics && this.bacteria && this.resistances) && (this.antibiotics.length && this.bacteria.length && this.resistances.length)) {\n\t\t\t\t// Let's assume this is the initial rendering and won't be called afterwards\n\t\t\t\tthis._handleDataUpdate(this.antibiotics, this.bacteria, this.resistances);\n\t\t\t}\n\n\t\t}\n\n\n\n\t\t/**\n\t\t* Updates visibility of rows and columsn to match this.filters. Handler for changes on this.filters.\n\t\t*/\n\t\t_updateVisibility() {\n\n\t\t\tconsole.log('ResistanceMatrixController: filters are %o', this.filters);\n\t\t\tconsole.time('updateVisibility');\n\n\t\t\tif (!this._data) return;\n\n\n\n\t\t\t// Filter BACTERIA (rows)\n\t\t\tthis._data.forEach((bacterium) => {\n\t\t\t\tconst match = this._matchesFilter(bacterium.bacterium, this.filters.bacterium);\n\t\t\t\tbacterium.bacterium.hidden = !match;\n\t\t\t});\n\n\n\n\t\t\t// Filter ANTIBIOTICS (cols)\n\t\t\tconst antibiotics = this._data[0].antibiotics;\n\n\t\t\t// Get indexes of all visible antibiotics; we only want to calculate the filters once\n\t\t\tconst visibleAntibioticIndexes = [];\n\t\t\tantibiotics.forEach((cell, index) => {\n\t\t\t\tif (this._matchesFilter(cell.antibiotic, this.filters.antibiotic)) {\n\t\t\t\t\tvisibleAntibioticIndexes.push(index);\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\t// Go through rows, then antibiotics, and update the «hidden» property on them\n\t\t\t// Only first row must be updated as all antibioics on cells are pointers\n\t\t\tconst firstRow = this._data[0];\n\t\t\tfirstRow.antibiotics.forEach((ab, abIndex) => {\n\t\t\t\tab.antibiotic.hidden = visibleAntibioticIndexes.indexOf(abIndex) > -1 ? false : true;\n\t\t\t});\n\n\n\t\t\t// Filter DIAGNOSIS (bacteria)\n\t\t\t// Must be in addition to bacteria filter above\n\t\t\tconst diagnosisFilter = this.filters.diagnosis;\n\t\t\t// Loop types (name etc.)\n\t\t\tconst allValidBacteria = [];\n\t\t\tObject.keys(diagnosisFilter).forEach((type) => {\n\t\t\t\tdiagnosisFilter[type][0].containers[0].bacteria.forEach((bacterium) => {\n\t\t\t\t\tallValidBacteria.push(bacterium.id);\n\t\t\t\t});\n\t\t\t});\n\t\t\t// If filter was not set (length 0), then don't filter. Else do.\n\t\t\tif (allValidBacteria.length > 0) {\n\t\t\t\tthis._data.forEach((bacterium) => {\n\t\t\t\t\t// Hide in addition to filter above\n\t\t\t\t\tif (allValidBacteria.indexOf(bacterium.bacterium.id) === -1) bacterium.bacterium.hidden = true;\n\t\t\t\t});\n\t\t\t}\n\n\n\t\t\tconsole.timeEnd('updateVisibility');\n\t\t\tconsole.time('updateDataOnMatrix');\n\t\t\tthis._matrix.updateData(this._data);\n\t\t\tconsole.timeEnd('updateDataOnMatrix');\n\n\n\t\t}\n\n\n\t\t/**\n\t\t* Takes bacterium or ab as item and the corresponding filters as filters and returns true if\n\t\t* the item is part of the filters. \n\t\t*/\n\t\t_matchesFilter(item, filters) {\n\n\t\t\t// Types of filters as array (e.g. ['gram'])\n\t\t\tconst filterTypes = Object.keys(filters);\n\n\t\t\t// Return value – true if all filter types are matched\n\t\t\tlet matchesAllFilters = true;\n\n\t\t\t// Loop filter types – e.g. name, gram etc.\n\t\t\tfilterTypes.some((type) => {\n\n\t\t\t\t// Same type of filter: They are additional, take all values\n\t\t\t\tconst filtersForType = filters[type];\n\t\t\t\t//console.log('ResistanceMatrixController: Filter by type %o', type);\n\t\t\t\t\t\n\t\t\t\t// Is item part of the current filter type?\n\t\t\t\tlet isInFilterType = false;\n\t\t\t\tfiltersForType.some((filter) => {\n\n\t\t\t\t\t// Filter is in container\n\t\t\t\t\tconst inContainer = filter.containers.find((container) => container.id === item.id);\n\t\t\t\t\tisInFilterType = !!inContainer;\n\n\t\t\t\t\t// Break\n\t\t\t\t\tif (isInFilterType) return true;\n\t\t\t\t\t\n\t\t\t\t});\n\n\t\t\t\tif (!isInFilterType) {\n\t\t\t\t\t//console.log('ResistanceMatrixController: %o is not in filters %o', item, filters[type]);\n\t\t\t\t\tmatchesAllFilters = false;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t});\n\n\t\t\treturn matchesAllFilters;\n\n\t\t}\n\n\n\n\n\n\t\t/**\n\t\t* Called whenever reistance, bacteria or antibiotics change: \n\t\t* Re-format data and update matrix\n\t\t*/\n\t\t_handleDataUpdate(antibiotics, bacteria, resistances) {\n\n\t\t\t\t// Conversion 1\n\t\t\t\tconsole.time('remodelMatrix');\n\t\t\t\tconst intermediateData = this._remodelMatrix(bacteria, antibiotics, resistances);\n\t\t\t\tconsole.timeEnd('remodelMatrix');\n\t\t\t\tconsole.log('ResistanceMatrixController: intermediateData is %o', intermediateData);\n\n\t\t\t\t// Conversion 2\n\t\t\t\t//const internalData = this._prepareMatrixForComponent(intermediateData);\n\t\t\t\t//console.log('ResistanceMatrixController / $onChanges: internalData is %o', internalData);\n\t\t\t\tthis._data = intermediateData;\n\n\t\t\t\t// Draw matrix, because it has not yet been initialized\n\t\t\t\t// Afterwards only update data and don't change scale\n\t\t\t\tif (!this._matrix) {\n\n\t\t\t\t\tconsole.time('initialMatrix');\n\n\t\t\t\t\tthis.$element.empty();\n\n\t\t\t\t\t// Create matrix\n\t\t\t\t\tthis._matrix = new infect.ResistanceMatrix(this.$element[0], this._data, {\n\t\t\t\t\t\tcolumnHeaderTransformer\t\t\t\t: (data) => data[0].antibiotics.map((item) => item)\n\t\t\t\t\t\t, columnLabelValue\t\t\t\t\t: (item) => item.antibiotic.name\n\t\t\t\t\t\t, columnIdentifier\t\t\t\t\t: (item) => 'ab-' + item.antibiotic.id\n\t\t\t\t\t\t, rowDataTransformer\t\t\t\t: (item) => item.antibiotics\n\t\t\t\t\t\t, rowIdentifier\t\t\t\t\t\t: (item) => 'bact-' + item.bacterium.id\n\t\t\t\t\t\t, cellColorValue\t\t\t\t\t: (item) => {\n\t\t\t\t\t\t\tconst color = item.colorValue;\n\t\t\t\t\t\t\tconst invertedColorValue = 1 + (color * -1);\n\n\t\t\t\t\t\t\tconst saturation = invertedColorValue * 0.5 + 0.4;\n\t\t\t\t\t\t\t// Lightness: 60–100% – this is very important\n\t\t\t\t\t\t\tconst lightness = (1 - invertedColorValue) * 0.5 + 0.4;\n\t\t\t\t\t\t\t// Hue 0-100\n\t\t\t\t\t\t\tconst hue = invertedColorValue * 100;\n\t\t\t\t\t\t\tconst rgb = infect.hslToRgb(hue / 255, saturation, lightness);\n\t\t\t\t\t\t\treturn `rgb(${ Math.round(rgb[0]) }, ${ Math.round(rgb[1]) }, ${ Math.round(rgb[2]) })`;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t, cellLabelValue\t\t\t\t\t: (item) => item.labelValue\n\t\t\t\t\t\t, rowLabelValue\t\t\t\t\t\t: (item) => item.bacterium.latinName\n\t\t\t\t\t\t, rowHidden\t\t\t\t\t\t\t: (item) => item.bacterium.hidden\n\t\t\t\t\t\t, columnHidden\t\t\t\t\t\t: (item) => item.antibiotic.hidden\n\t\t\t\t\t});\n\n\t\t\t\t\tconsole.timeEnd('initialMatrix');\n\n\t\t\t\t}\n\n\t\t}\n\n\n\t\t/**\n\t\t* Takes bacteria, antibiotics and resistances and creates a table consisting of Maps\n\t\t*\n\t\t* {\n\t\t*\t[bacteriumObject]\t\t: {\n\t\t*\t\t[antibioticObject]\t: resistance\n\t\t*\t\t[antibioticObject]\t: resistance\n\t\t*\t}\n\t\t* }, {\n\t\t*\t[bacteriumObject]\t\t: {\n\t\t*\t\t[antibioticObject]\t: resistance\n\t\t*\t\t[antibioticObject]\t: resistance\n\t\t*\t}\n\t\t* }\n\t\t*\n\t\t*/\n\t\t_remodelMatrix(bacteria, antibiotics, resistances) {\n\n\t\t\t// Map with key: bacterium, value: Map with key: antibiotic, value: reistance\n\t\t\tconst remodeled = [];\n\n\t\t\t// Sort antibiotics (as they will be re-used when creating the cols)\n\t\t\tconst sortedAntibiotics = antibiotics\n\t\t\t\t.sort((a, b) => a.name < b.name ? -1 : 1);\n\n\t\t\t// Create rows (bacteria) with cols (antibiotics)\n\t\t\tbacteria\n\t\t\t\t.sort((a, b) => a.latinName < b.latinName ? -1 : 1 )\n\t\t\t\t.forEach((bacterium) => {\n\t\t\t\t\tconst row = [];\n\t\t\t\t\tsortedAntibiotics.forEach((antibiotic) => {\n\t\t\t\t\t\trow.push({\n\t\t\t\t\t\t\tantibiotic\t\t: antibiotic\n\t\t\t\t\t\t\t// null is the default resistance\n\t\t\t\t\t\t\t, colorValue\t: null\n\t\t\t\t\t\t});\n\t\t\t\t\t});\t\t\t\t\n\t\t\t\t\tremodeled.push({\n\t\t\t\t\t\tbacterium\t\t\t: bacterium\n\t\t\t\t\t\t, antibiotics\t\t: row\n\t\t\t\t\t});\n\t\t\t\t});\n\n\n\t\t\t// Write resistance on value property of the mapping between antibiotic and bacterium\n\t\t\tresistances.forEach((resistance) => {\n\n\t\t\t\t// Get bacterium\n\t\t\t\tconst bacterium = remodeled.find((row) => row.bacterium === resistance.bacterium);\n\t\t\t\tif (!bacterium) return;\n\n\t\t\t\tconst antibiotic = bacterium.antibiotics.find((col) => col.antibiotic === resistance.antibiotic);\n\t\t\t\tif (!antibiotic) return;\n\n\t\t\t\tif (resistance.type === 'resistanceDefault') {\n\n\t\t\t\t\tswitch (resistance.value) {\n\t\t\t\t\t\t// Low\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\tantibiotic.colorValue = 0.2;\n\t\t\t\t\t\t\tantibiotic.labelValue = 'L';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t// Intermediate\n\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\tantibiotic.colorValue = 0.6;\n\t\t\t\t\t\t\tantibiotic.labelValue = 'I';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t// High\n\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\tantibiotic.colorValue = 1;\n\t\t\t\t\t\t\tantibiotic.labelValue = 'H';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault: \n\t\t\t\t\t\t\tconsole.error('Unknown resistance %o', resistance);\n\t\t\t\t\t\t\tantibiotic.colorValue = null;\n\t\t\t\t\t\t\tantibiotic.labelValue = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\telse {\n\t\t\t\t\tantibiotic.colorValue = resistance.value === null ? null : resistance.value / 100;\n\t\t\t\t\tantibiotic.labelValue = resistance.value === null ? '' : Math.round(resistance.value) + '%';\n\t\t\t\t}\n\n\t\t\t\t//console.error(resistance.type, resistance.value, antibiotic.colorValue, antibiotic.labelValue);\n\n\t\t\t});\n\n\t\t\treturn remodeled;\n\n\t\t}\n\n\t}\n\n\n\tResistanceMatrixController.$inject = ['$element'];\n\n\n\tangular\n\t.module('infekt')\n\t.component('resistanceMatrix', {\n\t\tcontroller\t\t\t: ResistanceMatrixController\n\t\t//, template\t\t\t: 'test {{$ctrl.filters | json}}#'\n\t\t, bindings\t\t\t: {\n\t\t\tresistances\t\t: '<' // One-way from parent\n\t\t\t, antibiotics\t: '<'\n\t\t\t, bacteria\t\t: '<'\n\t\t\t, filters\t\t: '<'\n\t\t}\n\t});\n\n})();\n"]}