{"version":3,"sources":["www/src/js/matrix/resistance-matrix-old.es2015.js"],"names":["ResistanceMatrix","container","data","config","Error","_container","_data","_configuration","spaceBetweenLabelsAndMatrix","transitionDuration","paddingRatio","colorValue","cellLabelValue","rowLabelValue","columnLabelValue","columnHeaderTransformer","item","columnHeaderIdentifier","rowIdentifier","rowDataTransformer","rowHidden","_elements","_isInitialRendering","svg","_createSVG","drawMatrix","console","log","dontUpdateScale","time","_columnScale","_createColumnScale","_colorScale","_createColorScale","_drawColumnHeads","_drawRows","_updateColumnScale","attr","_getMaxColumnLabelHeight","step","length","timeEnd","scale","elements","i","push","Math","random","all","join","document","querySelector","innerHTML","self","rows","selectAll","call","d","size","enteredRows","enter","append","exit","remove","_createSingleRowLabel","merge","_getMaxRowLabelWidth","getBBox","height","numberOfVisibleRows","translation","style","parent","_drawCell","property","element","text","d3","select","scaleBand","rangeRound","_getSvgWidth","domain","map","paddingInner","bandwidth","scaleSequential","t","invertedT","saturation","lightness","hue","hsl","toString","availableWidth","maxRowLabelWidth","each","max","width","ceil","maxColLabelHeight","headers","colHeads","colHeadsEnter","currentIndex","round","hidden","row","rowCells","gs","x","_drawCellRectangle","currentRowIndex","cells","labelValue","selector","match","nodeName","toLowerCase","matches","parentNode","child","index","previousSibling","label","y","getBoundingClientRect","top","left","parseInt","_mouseOverRect","fill","_getParentElement","classed","cell","colIndex","_getChildNodeIndex","currentCol","filter","window","infect"],"mappings":"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","file":"resistance-matrix-old.es2015.js","sourcesContent":["(() => {\n\n\t/* global d3, window */\n\n\t/**\n\t* Draws a matrix with resistencies. \n\t* Rows: Antibiotics\n\t* Cols: Bacteria\n\t* Cells: Colored according to resistance, with label\n\t*\n\t* Data should be an array containing rowData. rowData is an object with a property for the row's label\n\t* and a property wich contains an array with the cell's data:\n\t*\n\t* [\n\t*\t// One object per row\n\t*\t{\n\t*\n\t*\t\t// Row label's data\n\t*\t\tbacterium : { name: 'bact-name', id: 1 }\n\t*\n\t*\t\t// Cells display antibiotics\n\t*\t\t, antibiotics : [\n\t*\t\t\t{\n\t*\t\t\t\tantibiotic: { name: 'abname', id: 15}\n\t*\t\t\t\t, resistance: 0.5\n\t*\t\t\t}\n\t*\t\t]\n\t*\t}\n\t* ]\n\t*\n\t*/\n\tclass ResistanceMatrix {\n\n\t\t/**\n\t\t* @param {HTMLElement} container\n\t\t* @param {Array} data\t\t\t\tData to be displayed must be a 2-d array where the values of the 2nd dimension array\n\t\t*\t\t\t\t\t\t\t\t\tare objects, e.g. [[{bacterium: {name: 'bact-0'}, antibiotic: {name: 'ab-0'}, resistance: 0.5}]]\n\t\t* @param {Object} config\t\t\tContains the config with the following properties: \n\t\t*\t\t\t\t\t\t\t\t\t- colorValue: Function that returns the cell's color value (from the cell's object)\n\t\t* \t\t\t\t\t\t\t\t\t- cellLabelValue: Function that returns the cell label's value (from the cell's object)\n\t\t*\t\t\t\t\t\t\t\t\t- columnHeaderTransformer: transformation-function that takes the whole data and returns array relevant for\n\t\t*\t\t\t\t\t\t\t\t\t  column headers\n\t\t*\t\t\t\t\t\t\t\t\t- columnHeaderIdentifier: Function that returns id for the col header (from columnHeaderTransformer)\n\t\t*\t\t\t\t\t\t\t\t\t- columnLabelValue: Function that returns the column label's value (from the columnHeaderTransformer array)\n\t\t*\t\t\t\t\t\t\t\t\t- rowLabelValue: Function that returns the row label's value (from the cell's array)\n\t\t* \t\t\t\t\t\t\t\t\t- spaceBetweenLabelsAndMatrix: Space between label and matrix in px\n\t\t*\t\t\t\t\t\t\t\t\t- paddingRatio: Line weight (in % of the cells)\n\t\t*/\n\t\tconstructor(container, data, config = {}) {\n\n\t\t\tif (!container) {\n\t\t\t\tthrow new Error('ResistanceMatrix: At least one argument (container) is needed in constructor.');\n\t\t\t}\n\n\t\t\tthis._container \t= container;\n\t\t\tthis._data \t\t\t= data;\n\n\n\t\t\tthis._configuration\t= {\n\t\t\t\tspaceBetweenLabelsAndMatrix\t\t: config.spaceBetweenLabelsAndMatrix || 20\n\t\t\t\t, transitionDuration\t\t\t: config.transitionDuration || 900\n\t\t\t\t, paddingRatio\t\t\t\t\t: config.paddingRatio || 0.2\n\t\t\t\t, colorValue\t\t\t\t\t: config.colorValue || (() => 1)\n\t\t\t\t, cellLabelValue\t\t\t\t: config.cellLabelValue || (() => '–')\n\t\t\t\t, rowLabelValue\t\t\t\t\t: config.rowLabelValue || (() => 'n/a')\n\t\t\t\t, columnLabelValue\t\t\t\t: config.columnLabelValue || (() => 'n/a')\n\t\t\t\t, columnHeaderTransformer\t\t: config.columnHeaderTransformer || ((item) => item)\n\t\t\t\t, columnHeaderIdentifier\t\t: config.columnHeaderIdentifier || ((item) => item)\n\t\t\t\t, rowIdentifier\t\t\t\t\t: config.rowIdentifier || ((item) => item)\n\t\t\t\t, rowDataTransformer\t\t\t: config.rowDataTransformer || ((item) => item)\n\t\t\t\t, rowHidden\t\t\t\t\t\t: config.rowHidden || false\n\t\t\t};\n\n\t\t\t// Holds references\n\t\t\tthis._elements = {};\n\t\t\tthis._isInitialRendering = true;\n\n\t\t\t// Create SVG\n\t\t\tthis._elements.svg = this._createSVG();\n\n\t\t\t// If all required data is available, draw matrix\n\t\t\tif (this._container && this._data) this.drawMatrix();\n\n\t\t}\n\n\n\n\t\t/**\n\t\t* Updates the matrix' data\n\t\t* @param {Array} data\t\t\t\tArray (rows) of Arrays (cols) which hold the values (Object)\n\t\t*/\n\t\tupdateData(data) {\n\n\t\t\tthis._data = data;\n\t\t\tconsole.log('ResistanceMatrix: Update data to %o', data);\n\t\t\t// When data is updated, don't update scales, we want all entities to retain\n\t\t\t// their size.\n\t\t\tif (this._container && this._data) this.drawMatrix(true);\n\n\t\t}\n\n\n\n\n\t\t/**\n\t\t* Main method. Draws the matrix with data and container provided.\n\t\t*/\n\t\tdrawMatrix(dontUpdateScale) {\n\n\t\t\tconsole.time('drawMatrix');\n\t\t\tconsole.time('drawMatrix-initial');\n\n\t\t\t// Create scales if we want them to be updated (which we don't when elements are removed or added\n\t\t\t// as this will enlarge/reduce the cell's size)\n\t\t\tif (!dontUpdateScale) {\n\t\t\t\tthis._columnScale = this._createColumnScale();\n\t\t\t\tthis._colorScale = this._createColorScale();\n\t\t\t}\n\n\t\t\t// Draw column heads and rows (incl. labels and cells) – this is the very\n\t\t\t// basic setup.\n\t\t\tthis._drawColumnHeads(this._columnScale);\n\t\t\tthis._drawRows(this._columnScale);\n\n\t\t\t// Update column scale to account for labels (row/col) which take up\n\t\t\t// space\n\t\t\tif (!dontUpdateScale) {\n\t\t\t\tthis._updateColumnScale();\n\t\t\t}\n\n\t\t\t// Set height of the whole SVG\n\t\t\t//console.error(this._getMaxColumnLabelHeight(), this._configuration.spaceBetweenLabelsAndMatrix, this._data.length, this._columnScale.step(), this._columnScale.bandwidth());\n\t\t\t// Why step() + 4? IDK. It just works. If we only use step(), step seems to be too small.\n\t\t\tthis._elements.svg.attr('height', this._getMaxColumnLabelHeight() + this._configuration.spaceBetweenLabelsAndMatrix + (this._columnScale.step() + 4) * this._data.length);\n\n\t\t\tconsole.timeEnd('drawMatrix-initial');\n\t\t\tconsole.time('drawMatrix-rerender');\n\n\t\t\t// When rendering is initial, update rows and columns to account for new scale\n\t\t\t// that now respects labels\n\t\t\tif(this._isInitialRendering) {\n\t\t\t\tthis._drawRows(this._columnScale);\n\t\t\t\tthis._drawColumnHeads(this._columnScale);\n\t\t\t}\n\n\t\t\tconsole.timeEnd('drawMatrix-rerender');\n\n\t\t\tthis._isInitialRendering = false;\n\n\t\t\tconsole.timeEnd('drawMatrix');\n\n\t\t}\n\n\n\n\n\n\t\t/**\n\t\t* Draws the rows\n\t\t* @param {Number} rowHeight\t\t\tWidth of a single row\n\t\t*/\n\t\t_drawRows(scale) {\n\n\t\t\tconsole.time('fxstyle');\n\t\t\tconst elements = [];\n\t\t\tfor(let i = 0; i < 2500; i++) {\n\t\t\t\telements.push(`<use xlink:href=\"#cell-circle\" x=\"${i * 10}\" y=\"${i * 10}\" fill=\"${ this._colorScale(Math.random())}\"></use>`);\n\t\t\t}\n\t\t\tconst all = elements.join('');\n\t\t\tconsole.timeEnd('fxstyle');\n\t\t\tconsole.time('fxappend');\n\t\t\tconst svg = document.querySelector('svg');\n\t\t\tsvg.innerHTML = svg.innerHTML + all;\n\t\t\tconsole.timeEnd('fxappend');\n\n\t\t\tconsole.time('drawRows');\n\t\t\treturn;\n\t\t\tconst self = this;\n\n\t\t\t//console.log('ResistanceMatrix: Draw %o rows with data %o and height %o', Object.values(this._data), scale.bandwidth());\n\n\t\t\t// g\n\t\t\tconst rows = this._elements.svg\n\t\t\t\t.selectAll('.row')\n\t\t\t\t.call((d) => console.log('ResistanceMatrix: Updated rows', d.size()))\n\t\t\t\t// http://stackoverflow.com/questions/22240842/d3-update-on-node-removal-always-remove-the-last-entry-in-svg-dom\n\t\t\t\t.data(this._data, this._configuration.rowIdentifier);\n\t\t\t\t\n\n\t\t\t// Enter: Append g\n\t\t\tconst enteredRows = rows\n\t\t\t\t.enter()\n\t\t\t\t\t.append('g')\n\t\t\t\t\t.attr('class', 'row');\n\n\n\t\t\t// Exit\n\t\t\trows\n\t\t\t\t.exit()\n\t\t\t\t.remove();\n\n\n\t\t\t// Draw label on enter; do it before drawing the cells to\n\t\t\t// have the correct DOM order\n\t\t\tthis._createSingleRowLabel(enteredRows);\n\n\n\t\t\t// Update and enter: \n\t\t\t// Adjust LABEL position\n\t\t\tenteredRows\n\t\t\t\t.merge(rows)\n\t\t\t\t.selectAll('.row-label')\n\t\t\t\t.attr('transform', function() {\n\t\t\t\t\treturn `translate(${ self._getMaxRowLabelWidth() }, ${ this.getBBox().height / 2 - 4 })`;\n\t\t\t\t});\n\n\n\n\t\t\t// Enter and update:\n\t\t\t// - move down\n\t\t\t// - animates transformation\n\t\t\tconsole.time('drawRows-translation');\n\t\t\tlet numberOfVisibleRows = 0;\n\t\t\tenteredRows\n\t\t\t\t.call((d) => console.log('ResistanceMatrix: New rows', d.size() ))\n\t\t\t\t.merge(rows)\n\t\t\t\t//.transition()\n\t\t\t\t//.duration(this._configuration.transitionDuration)\n\t\t\t\t.attr('transform', (d) => {\n\t\t\t\t\tconst translation =  `translate(0, ${ this._getMaxColumnLabelHeight() + this._configuration.spaceBetweenLabelsAndMatrix + numberOfVisibleRows * scale.step() })`;\n\t\t\t\t\tif (!this._configuration.rowHidden(d)) numberOfVisibleRows++;\n\t\t\t\t\treturn translation;\n\t\t\t\t})\n\t\t\t\t.style('opacity', (d) => this._configuration.rowHidden(d) ? 0 : 1);\n\n\t\t\tconsole.timeEnd('drawRows-translation');\n\n\n\t\t\tconsole.time('drawRows-cells');\n\t\t\t// Draw cells when rows are updated and drawn\n\t\t\tenteredRows\n\t\t\t\t.merge(rows)\n\t\t\t\t.call((parent) => {\n\t\t\t\t\tthis._drawCell(parent, scale);\n\t\t\t\t});\n\t\t\tconsole.timeEnd('drawRows-cells');\n\n\t\t\tconsole.timeEnd('drawRows');\n\n\n\t\t}\n\n\n\n\t\t/**\n\t\t* Returns the SVG's width \n\t\t* @return {Number}\n\t\t*/\n\t\t_getSvgWidth() {\n\t\t\treturn this._elements.svg.property('clientWidth');\n\t\t}\n\n\n\n\t\t/**\n\t\t* Creates and returns a single row label. Needed to first measure and then\n\t\t* draw it at the right place\n\t\t*/\n\t\t_createSingleRowLabel(element) {\n\n\t\t\treturn element\n\t\t\t\t.append('text')\n\t\t\t\t.attr('class', 'row-label')\n\t\t\t\t.attr('text-anchor', 'end')\n\t\t\t\t.text(this._configuration.rowLabelValue);\n\n\t\t}\n\n\n\t\t/**\n\t\t* Creates and returns the SVG\n\t\t*/\n\t\t_createSVG() {\n\t\t\tconst svg = d3.select(this._container)\n\t\t\t\t.append('svg');\n\n\t\t\tsvg.append('defs')\n\t\t\t\t.append('g')\n\t\t\t\t.attr('id', 'cell-circle')\n\t\t\t\t.append('circle')\n\t\t\t\t.style('fill', 'inherit')\n\t\t\t\t.style('transform', 'translate(40px)')\n\t\t\t\t.style('transition', 'transform 2s')\n\t\t\t\t.style('stroke', '#000')\n\t\t\t\t.style('stroke-width', 1)\n\t\t\t\t//.style('transform', 'inherit')\n\t\t\t\t.attr('r', 15);\n\n\t\t\treturn svg;\n\t\t}\n\n\n\n\t\t/**\n\t\t* Creates the scale for all columns, i.e. for all the vertical entities – row data\n\t\t* must be taken. This is done before the labels are there, therefore take the whole\n\t\t* SVG width. The scale's range will later be updated through _updateColumnScale\n\t\t*/\n\t\t_createColumnScale() { \n\n\t\t\tconst data = this._configuration.columnHeaderTransformer(this._data);\n\t\t\tconsole.log('ResistanceMatrix: Data for column scale len %', data.length);\n\t\t\tconst scale = d3.scaleBand()\n\t\t\t\t// -50: We turn the col labels by 45°, this takes a bit of space\n\t\t\t\t.rangeRound([0, this._getSvgWidth() - 50])\n\t\t\t\t// Domain: Array of object fucks things up (only has 1 entry) – use Array of strings\n\t\t\t\t.domain(data.map(this._configuration.columnHeaderIdentifier))\n\t\t\t\t.paddingInner(this._configuration.paddingRatio);\n\t\t\tconsole.log('ResistanceMatrix: Column scale bandwidth is %o', scale.bandwidth());\n\t\t\treturn scale;\n\n\t\t}\n\n\n\n\t\t/**\n\t\t* Returns the scale for coloring the cells\n\t\t*/\n\t\t_createColorScale() {\n\t\t\treturn new d3.scaleSequential((t) => {\n\t\t\t\t// Saturation: 40–90%\n\t\t\t\tconst invertedT = 1 + (t * -1);\n\t\t\t\tconst saturation = invertedT * 0.5 + 0.4;\n\t\t\t\t// Lightness: 60–100% – this is very important\n\t\t\t\tconst lightness = (1 - invertedT) * 0.6 + 0.4;\n\t\t\t\t// Hue 0-100\n\t\t\t\tconst hue = invertedT * 100;\n\t\t\t\tconst hsl = d3.hsl(hue, saturation, lightness);\n\t\t\t\treturn hsl.toString();\n\t\t\t});\n\t\t}\n\n\n\n\t\t/**\n\t\t* Updates the col scale. Is called after labels were drawn and measured. Scale should take up\n\t\t* all horizontal space that's left. \n\t\t*/\n\t\t_updateColumnScale() {\n\n\t\t\t// 50: Just some security margin\n\t\t\tconst availableWidth = this._getSvgWidth() - 50 - this._getMaxRowLabelWidth() - this._configuration.spaceBetweenLabelsAndMatrix;\n\t\t\tconsole.log('ResistanceMatrix / _updateColumnScale: SVG width is %o, width column content is %o', this._getSvgWidth(), availableWidth);\n\n\t\t\t// Update scale\n\t\t\tthis._columnScale.rangeRound([0, availableWidth]);\n\t\t\tconsole.log('ResistanceMatrix: New bandwidth is %o, step is %o', this._columnScale.bandwidth(), this._columnScale.step());\n\n\t\t}\n\n\n\n\t\t/**\n\t\t* Returns width of widest row label\n\t\t*/\n\t\t_getMaxRowLabelWidth() {\n\n\t\t\tif (!this._elements.svg.selectAll('.row')) return 0;\n\n\t\t\tlet maxRowLabelWidth = 0;\n\t\t\tthis._elements.svg.selectAll('.row').select('.row-label').each(function(){\n\t\t\t\tmaxRowLabelWidth = Math.max(maxRowLabelWidth, this.getBBox().width);\n\t\t\t});\n\t\t\treturn Math.ceil(maxRowLabelWidth);\n\n\t\t}\n\n\n\n\t\t/**\n\t\t* Returns width of widest column label\n\t\t*/\n\t\t_getMaxColumnLabelHeight() {\n\t\t\tlet maxColLabelHeight = 0;\n\t\t\tthis._elements.svg.selectAll('.column').select('.column-label').each(function() {\n\t\t\t\tmaxColLabelHeight = Math.max(maxColLabelHeight, this.getBBox().width);\n\t\t\t});\n\t\t\treturn Math.ceil(maxColLabelHeight);\n\t\t}\n\n\n\n\n\n\n\n\t\t/**\n\t\t* Draws the column heads, then returns the created elements\n\t\t*/\n\t\t_drawColumnHeads(scale) {\n\n\t\t\tconst self = this;\n\n\t\t\t// Get headers from data (keys of first array item)\n\t\t\tconst headers = this._configuration.columnHeaderTransformer(this._data);\n\n\t\t\t// <g> and transform\n\t\t\tconst colHeads = this._elements.svg\n\t\t\t\t.selectAll('.column')\n\t\t\t\t.data(headers, this._configuration.columnHeaderIdentifier)\n\t\t\t\t.call((d) => console.log('ResistanceMatrix: Update headers %o', d.size()));\n\n\t\t\t// Draw heads, consisting of <g> with contained <text>\n\t\t\tconst colHeadsEnter = colHeads\n\t\t\t\t.enter()\n\t\t\t\t\t.append('g')\n\t\t\t\t\t// translation will be done in this.updatePositionsAndSizes\n\t\t\t\t\t.attr('class', 'column')\n\t\t\t\t\t.call((d) => console.log('ResistanceMatrix: New headers: %o', d.size()));\n\n\t\t\t// Append text. Rotate by 45°\n\t\t\tcolHeadsEnter\n\t\t\t\t\t.append('text')\n\t\t\t\t\t\t.attr('class', 'column-label')\n\t\t\t\t\t\t.attr('text-anchor', 'start')\n\t\t\t\t\t\t.attr('transform', 'rotate(-45)')\n\t\t\t\t\t\t.text(this._configuration.columnLabelValue);\n\n\n\t\t\t// Update position\n\t\t\t// (enter and update)\n\t\t\tlet currentIndex = 0;\n\t\t\tcolHeadsEnter\n\t\t\t\t.merge(colHeads)\n\t\t\t\t//.transition()\n\t\t\t\t//.duration(this._configuration.transitionDuration)\n\t\t\t\t.attr('transform', function(d) {\n\t\t\t\t\tconst translation = `translate(${ currentIndex * scale.step() + self._getMaxRowLabelWidth() + self._configuration.spaceBetweenLabelsAndMatrix + Math.round(scale.step() / 2 - 8) }, ${ self._getMaxColumnLabelHeight() })`;\n\t\t\t\t\tif (!d.hidden) currentIndex++;\n\t\t\t\t\treturn translation;\n\t\t\t\t})\n\t\t\t\t.style('opacity', (d) => d.hidden ? 0 : 1);\n\n\t\t}\n\n\n\n\n\t\t/**\n\t\t* Draws a single resistance cell\n\t\t*/\n\t\t_drawCell(row, scale) {\n\n\t\t\t//console.log('ResistanceMatrix: Draw cell; row %o, dimensions %o', row, scale.bandwidth());\n\t\t\tconst self = this;\n\n\t\t\tconst rowCells = row\n\t\t\t\t.selectAll('.cell')\n\t\t\t\t// Row is {bacterium: {} antibiotics: []} – only use antibiotics\n\t\t\t\t.data(this._configuration.rowDataTransformer)\n\t\t\t\t.call((d) => console.log('ResistanceMatrix: Updated cells', d.size()));\n\n\n\t\t\t// g\n\t\t\tconsole.time('drawCell-g');\n\t\t\tconst gs = rowCells\n\t\t\t\t.enter()\n\t\t\t\t.call((d) => console.log('ResistanceMatrix: New cells', d.size()))\n\t\t\t\t.append('g')\n\t\t\t\t// data-label attribute (debugging)\n\t\t\t\t.attr('data-label', (d) => {\n\t\t\t\t\treturn this._configuration.cellLabelValue(d);\n\t\t\t\t})\n\t\t\t\t.attr('data-antibiotic', (d) => {\n\t\t\t\t\treturn this._configuration.columnLabelValue(d);\n\t\t\t\t})\n\t\t\t\t// data-color attribute (debugging)\n\t\t\t\t.attr('data-color', (d) => {\n\t\t\t\t\treturn this._configuration.colorValue(d);\n\t\t\t\t})\n\t\t\t\t.attr('class', 'cell')\n\t\t\t\t.attr('transform', (d, i) => {\n\t\t\t\t\tconst x = self._getMaxRowLabelWidth() + self._configuration.spaceBetweenLabelsAndMatrix + i * scale.step();\n\t\t\t\t\treturn `translate(${ x }, 0)`;\n\t\t\t\t});\n\n\t\t\t\t/*.each(function(d, i) {\n\t\t\t\t\tself._drawCellRectangle(g);\n\t\t\t\t});*/\n\t\t\tconsole.timeEnd('drawCell-g');\n\n\n\n\t\t\tconsole.time('drawCell-rectangle');\n\t\t\t// Add rect to every g\n\t\t\tthis._drawCellRectangle(gs, scale);\n\t\t\tconsole.timeEnd('drawCell-rectangle');\n\n\n\t\t\t// Label\n\t\t\tconsole.time('drawCell-label');\n\t\t\t//this._drawCellLabel(gs);\n\t\t\tconsole.timeEnd('drawCell-label');\n\n\n\n\n\t\t\tconsole.time('drawCell-transform');\n\t\t\t// Move right\n\t\t\tlet currentRowIndex = 0;\n\t\t\trow\n\t\t\t\t.enter()\n\t\t\t\t.merge(row)\n\t\t\t\t.selectAll('.cell')\n\t\t\t\t//.transition()\n\t\t\t\t//.duration(this._configuration.transitionDuration)\n\t\t\t\t/*.attr('transform', (d, i) => {\n\t\t\t\t\t// Reset currentRowIndex if i equals 0 again\n\t\t\t\t\tif (i === 0) currentRowIndex = 0;\n\t\t\t\t\t// Get translation\n\t\t\t\t\tconst translation = `translate(${ this._getMaxRowLabelWidth() + this._configuration.spaceBetweenLabelsAndMatrix + currentRowIndex * scale.step() }, 0)`;\n\t\t\t\t\t// Update currentRowIndex\n\t\t\t\t\tif (!d.hidden) currentRowIndex++;\n\t\t\t\t\treturn translation;\n\t\t\t\t})*/\n\n\t\t\t\t/*.attr('cx', (d, i) => {\n\t\t\t\t\t// Reset currentRowIndex if i equals 0 again\n\t\t\t\t\t//if (i === 0) currentRowIndex = 0;\n\t\t\t\t\t// Get translation\n\t\t\t\t\t//const x = this._getMaxRowLabelWidth() + this._configuration.spaceBetweenLabelsAndMatrix + i * scale.step();\n\t\t\t\t\t// Update currentRowIndex\n\t\t\t\t\t//if (!d.hidden) currentRowIndex++;\n\t\t\t\t\t//return x;\n\t\t\t\t\t//return x;\n\t\t\t\t\t//return translation;\n\t\t\t\t})*/\n\t\t\t\t/*.style('opacity', (d) => {\n\t\t\t\t\treturn d.hidden ? 0 : 1;\n\t\t\t\t});*/\n\t\t\tconsole.timeEnd('drawCell-transform');\n\n\n\t\t}\n\n\n\t\t/**\n\t\t* Draws the label in a cell\n\t\t*/\n\t\t_drawCellLabel(cells) {\n\n\t\t\tconst self = this;\n\n\t\t\tcells.each(function(d) {\n\t\t\t\tconst labelValue = self._configuration.cellLabelValue(d);\n\t\t\t\td3.select(this)\n\t\t\t\t\t.append('text')\n\t\t\t\t\t.attr('class', 'cell-label')\n\t\t\t\t\t.text(labelValue)\n\t\t\t\t\t.style('pointer-events', 'none')\n\t\t\t\t\t.attr('transform', function() {\n\t\t\t\t\t\tconst translation = `translate(${ this.getBBox().width / -2 }, ${ this.getBBox().height / 2 - 4 })`;\n\t\t\t\t\t\treturn translation;\n\t\t\t\t\t});\n\t\t\t});\n\n\t\t}\n\n\n\t\t/**\n\t\t* Draws the rectangle in a cell\n\t\t*/\n\t\t_drawCellRectangle(cells, scale) {\n\n\t\t\tconst self = this;\n\n\t\t\tcells\n\n\t\t\t\t.append('use')\n\t\t\t\t.attr('xlink:href', '#cell-circle')\n\t\t\t\t.style('fill', (d) => {\n\t\t\t\t\tconst colorValue = self._configuration.colorValue(d);\n\t\t\t\t\treturn colorValue === null ? '#fff' : self._colorScale(colorValue);\n\t\t\t\t});\n\n\n\t\t\t\t/*.append('circle')\n\n\t\t\t\t// Fill\n\t\t\t\t.style('fill', (d) => {\n\t\t\t\t\tconst colorValue = self._configuration.colorValue(d);\n\t\t\t\t\treturn colorValue === null ? '#fff' : self._colorScale(colorValue);\n\t\t\t\t})\n\n\t\t\t\t// Add white stroke around cells so that mouse over happens smoothly\n\t\t\t\t.style('stroke', (d) => self._configuration.colorValue(d) === null ? '#dedede' : '#fff')\n\n\t\t\t\t// Stroke width: 1px for empty values, else half of the space between the cells\n\t\t\t\t.style('stroke-width', (d) => self._configuration.colorValue(d) === null ? 1 : (scale.step() - scale.bandwidth()) / 2 )\n\n\t\t\t\t// Radius: Remove stroke from radius if stroke's there\n\t\t\t\t.attr('r', (d) => self._configuration.colorValue(d) === null ? scale.bandwidth() / 2 - 2 : scale.bandwidth() / 2)\n\n\t\t\t\t.attr('cx', (d, i) => {\n\t\t\t\t\tconst x = self._getMaxRowLabelWidth() + self._configuration.spaceBetweenLabelsAndMatrix + i * scale.step();\n\t\t\t\t\treturn x;\n\t\t\t\t})\n\n\t\t\t\t.on('mouseenter', function(d) {\n\t\t\t\t\tconst element = this;\n\t\t\t\t\tself._mouseOverHandler.call(self, element, d);\n\t\t\t\t})\n\n\t\t\t\t.on('mouseleave', function() {\n\t\t\t\t\tconst element = this;\n\t\t\t\t\tself._mouseOutHandler.call(self, element);\n\t\t\t\t});*/\n\n\t\t}\n\n\n\n\n\n\t\t/**\n\t\t* Returns the first parent of element that matches selector\n\t\t*/\n\t\t_getParentElement(element, selector) {\n\n\t\t\tlet match;\n\t\t\twhile(element.nodeName.toLowerCase() !== 'svg') {\n\t\t\t\tif (element.matches(selector)) {\n\t\t\t\t\tmatch = element;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telement = element.parentNode;\n\t\t\t}\n\n\t\t\treturn match;\n\n\t\t}\n\n\t\t/**\n\t\t* Returns index of current child that matches selector in its parent\n\t\t*/\n\t\t_getChildNodeIndex(child, selector) {\n\n\t\t\tlet index = 0;\n\t\t\twhile(child.previousSibling) {\n\t\t\t\tif (child.previousSibling.matches(selector)) index++;\n\t\t\t\tchild = child.previousSibling;\n\t\t\t}\n\t\t\treturn index;\n\n\t\t}\n\n\n\t\t/**\n\t\t* Handles mouseenter on a cell\n\t\t*/\n\t\t_mouseOverHandler(element, data) {\n\n\t\t\tconst label = this._configuration.cellLabelValue(data);\n\n\t\t\t// Data not available: Cell has no value. There's no \n\t\t\t// hover effect for empty cells.\n\t\t\tif (!label) return;\n\n\t\t\t// Map svg's DOM element to svg\n\t\t\tlet svg;\n\t\t\tthis._elements.svg.each(function() { svg = this; });\n\n\t\t\tconst y\t\t\t= element.getBoundingClientRect().top - svg.getBoundingClientRect().top\n\t\t\t\t, x\t\t\t= element.getBoundingClientRect().left - svg.getBoundingClientRect().left\n\t\t\t\t, width\t\t= parseInt(element.getBBox().width, 10) + 40\n\t\t\t\t, height\t= parseInt(element.getBBox().height, 10) + 40;\n\n\n\t\t\tthis._mouseOverRect = this._elements.svg\n\t\t\t\t.append('g')\n\t\t\t\t.attr('transform', `translate(${ x-20 }, ${ y - 20 })`);\n\n\t\t\tthis._mouseOverRect\n\t\t\t\t.append('circle')\n\t\t\t\t.attr('class', 'hover-cell')\n\t\t\t\t.style('fill', element.style.fill)\n\t\t\t\t.style('pointer-events', 'none')\n\t\t\t\t.attr('r', width / 2)\n\t\t\t\t.attr('cx', width / 2)\n\t\t\t\t.attr('cy', width / 2);\n\t\t\t\n\t\t\tthis._mouseOverRect\n\t\t\t\t.append('text')\n\t\t\t\t.text(label)\n\t\t\t\t.style('color', 'black')\n\t\t\t\t.style('font-size', '20px')\n\t\t\t\t.style('text-align', 'center')\n\t\t\t\t.style('pointer-events', 'none')\n\t\t\t\t.attr('transform', function() {\n\t\t\t\t\treturn `translate(${ width / 2 - this.getBBox().width / 2 }, ${ this.getBBox().height / 2 + height / 2 - 5 })`;\n\t\t\t\t});\n\n\n\t\t\t// Highlight row\n\t\t\tconst row = this._getParentElement(element, '.row');\n\t\t\td3.select(row).classed('active',true);\n\n\t\t\t// Highlight col\n\t\t\tconst cell = this._getParentElement(element, '.cell');\n\t\t\tconst colIndex = this._getChildNodeIndex(cell, '.cell');\n\t\t\tconst currentCol = this._elements.svg.selectAll('.column').filter((d,i) => i === colIndex);\n\t\t\tcurrentCol\n\t\t\t\t.classed('active', true);\n\n\t\t}\n\n\t\t_mouseOutHandler() {\n\n\t\t\tif (this._mouseOverRect) this._mouseOverRect.remove();\n\n\t\t\tthis._elements.svg.selectAll('.row').classed('active', false);\n\t\t\tthis._elements.svg.selectAll('.column').classed('active', false);\n\n\t\t}\n\n\t}\n\n\twindow.infect = window.infect || {};\n\twindow.infect.ResistanceMatrix = ResistanceMatrix;\n\n})();\n\n"]}