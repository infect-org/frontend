{"version":3,"sources":["www/src/js/matrix/resistance-matrix.es2015.js"],"names":["ResistanceMatrix","container","data","config","Error","_container","_data","_svgNS","_configuration","spaceBetweenLabelsAndMatrix","transitionDuration","lineWidth","cellColorValue","cellLabelValue","rowIdentifier","rowLabelValue","columnLabelValue","columnHeaderTransformer","item","columnIdentifier","rowDataTransformer","rowHidden","columnHidden","_elements","console","time","_drawMatrix","timeEnd","log","visibleCols","filter","length","colScale","_createScale","_colScale","offset","_defaultStep","_updateColumnPositionAndVisibility","visibleRows","rowScale","_updateRowPositionsAndVisibility","_rowScale","scale","rowIds","Object","keys","rows","forEach","rowId","pos","getPosition","row","undefined","style","opacity","display","transform","colIds","columns","colId","element","el","svg","_createSVG","append","innerHTML","rowLabelMaxWidth","_getRowLabelMaxWidth","left","_getSvgWidth","step","content","push","_createCellCircleDefs","bandwidth","_createColHeads","_createRows","join","maxLabelHeight","document","querySelector","getBoundingClientRect","height","querySelectorAll","Array","from","getAttribute","cells","cell","identifier","body","_hoveredMatrixCell","mouseOver","_createEmptyMouseOverCell","appendChild","addEventListener","ev","_mouseOverHandler","target","classList","contains","parentNode","_updateMouseOverCell","hoveredCell","colIdentifier","textContent","setAttribute","cellDimensions","radius","Math","round","g","createElementNS","add","pointerEvents","cursor","_createRow","_createRowLabel","maxWidth","width","removeChild","ceil","values","identifierFunction","positions","floor","index","value","indentation","replace","transformer","valueFunction","rowIdentifierFunction","colorValue","labelValue","rowData","label","_createCellsForRow","columnIdentifierFunction","cellDatum","textFunction","heads","head","_createColHead","dimensions","roundedRadius","attr","text","window","infect"],"mappings":"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","file":"resistance-matrix.es2015.js","sourcesContent":["(() => {\n\n\t/* global window, document */\n\n\t/**\n\t* Draws a matrix with resistencies. \n\t* Rows: Antibiotics\n\t* Cols: Bacteria\n\t* Cells: Colored according to resistance, with label\n\t*\n\t* Data should be an array containing rowData. rowData is an object with a property for the row's label\n\t* and a property wich contains an array with the cell's data:\n\t*\n\t* [\n\t*\t// One object per row\n\t*\t{\n\t*\n\t*\t\t// Row label's data\n\t*\t\tbacterium : { name: 'bact-name', id: 1 }\n\t*\n\t*\t\t// Cells display antibiotics\n\t*\t\t, antibiotics : [\n\t*\t\t\t{\n\t*\t\t\t\tantibiotic: { name: 'abname', id: 15}\n\t*\t\t\t\t, resistance: 0.5\n\t*\t\t\t}\n\t*\t\t]\n\t*\t}\n\t* ]\n\t*\n\t*/\n\tclass ResistanceMatrix {\n\n\t\t/**\n\t\t* @param {HTMLElement} container\n\t\t* @param {Array} data\t\t\t\tData to be displayed must be a 2-d array where the values of the 2nd dimension array\n\t\t*\t\t\t\t\t\t\t\t\tare objects, e.g. [[{bacterium: {name: 'bact-0'}, antibiotic: {name: 'ab-0'}, resistance: 0.5}]]\n\t\t* @param {Object} config\t\t\tContains the config with the following properties: \n\t\t*\t\t\t\t\t\t\t\t\t- cellColorValue: Function that returns the cell's color value (from the cell's object)\n\t\t* \t\t\t\t\t\t\t\t\t- cellLabelValue: Function that returns the cell label's value (from the cell's object)\n\t\t*\t\t\t\t\t\t\t\t\t- columnHeaderTransformer: transformation-function that takes the whole data and returns array relevant for\n\t\t*\t\t\t\t\t\t\t\t\t  column headers\n\t\t*\t\t\t\t\t\t\t\t\t- columnIdentifier: Function that returns id for the col header (from columnHeaderTransformer)\n\t\t*\t\t\t\t\t\t\t\t\t- columnLabelValue: Function that returns the column label's value (from the columnHeaderTransformer array)\n\t\t*\t\t\t\t\t\t\t\t\t- rowLabelValue: Function that returns the row label's value (from the cell's array)\n\t\t* \t\t\t\t\t\t\t\t\t- spaceBetweenLabelsAndMatrix: Space between label and matrix in px\n\t\t*\t\t\t\t\t\t\t\t\t- paddingRatio: Line weight (in % of the cells)\n\t\t*/\n\t\tconstructor(container, data, config = {}) {\n\n\t\t\tif (!container) {\n\t\t\t\tthrow new Error('ResistanceMatrix: Container must be passed to constructor.');\n\t\t\t}\n\n\t\t\tif (!data) {\n\t\t\t\tthrow new Error('ResistanceMatrix: Data needed in constructor');\n\t\t\t}\n\n\t\t\tthis._container \t= container;\n\t\t\tthis._data \t\t\t= data;\n\t\t\tthis._svgNS\t\t\t= 'http://www.w3.org/2000/svg';\n\n\n\t\t\tthis._configuration\t= {\n\t\t\t\tspaceBetweenLabelsAndMatrix\t\t: config.spaceBetweenLabelsAndMatrix || 20\n\t\t\t\t, transitionDuration\t\t\t: config.transitionDuration || 900\n\t\t\t\t, lineWidth\t\t\t\t\t\t: config.lineWidth || 2\n\t\t\t\t, cellColorValue\t\t\t\t: config.cellColorValue || (() => 1)\n\t\t\t\t, cellLabelValue\t\t\t\t: config.cellLabelValue || (() => '–')\n\t\t\t\t, rowIdentifier\t\t\t\t\t: config.rowIdentifier || 'n/a'\n\t\t\t\t, rowLabelValue\t\t\t\t\t: config.rowLabelValue || (() => 'n/a')\n\t\t\t\t, columnLabelValue\t\t\t\t: config.columnLabelValue || (() => 'n/a')\n\t\t\t\t, columnHeaderTransformer\t\t: config.columnHeaderTransformer || ((item) => item)\n\t\t\t\t, columnIdentifier\t\t\t\t: config.columnIdentifier || ((item) => item)\n\t\t\t\t// Returns value for rows on each data item\n\t\t\t\t, rowDataTransformer\t\t\t: config.rowDataTransformer || ((item) => item)\n\t\t\t\t, rowHidden\t\t\t\t\t\t: config.rowHidden ||(() => false)\n\t\t\t\t, columnHidden\t\t\t\t\t: config.columnHidden || (() =>false)\n\t\t\t};\n\n\n\t\t\t// Create SVG\n\t\t\tthis._elements = {};\n\t\t\tconsole.time('drawMatrix');\n\t\t\tthis._drawMatrix();\n\t\t\tconsole.timeEnd('drawMatrix');\n\n\t\t}\n\n\n\n\n\n\t\t/**\n\t\t* Updates the matrix' data\n\t\t* @param {Array} data\t\t\t\tArray (rows) of Arrays (cols) which hold the values (Object)\n\t\t*/\n\t\tupdateData(data) {\n\n\t\t\tconsole.time('updateData');\n\n\t\t\tthis._data = data;\n\t\t\tconsole.log('ResistanceMatrix: Update data to %o', data);\n\n\n\t\t\t// Cols\n\t\t\tconst visibleCols = this._configuration.columnHeaderTransformer(this._data).filter((item) => !this._configuration.columnHidden(item));\n\t\t\tconsole.log('ResistanceMatrix: Visible cols', visibleCols.length);\n\n\t\t\tconst colScale = this._createScale(\n\t\t\t\t  visibleCols\n\t\t\t\t, this._configuration.columnIdentifier\n\t\t\t\t, this._colScale.offset()\n\t\t\t\t, this._defaultStep * visibleCols.length\n\t\t\t\t, this._configuration.lineWidth\n\t\t\t);\n\n\t\t\tthis._updateColumnPositionAndVisibility(colScale);\n\n\n\n\t\t\t// Rows\n\t\t\tconst visibleRows = this._data.filter((item) => !this._configuration.rowHidden(item));\n\t\t\tconsole.log('ResistanceMatrix: Visible rows %o', visibleRows.length);\n\t\t\tconst rowScale = this._createScale(\n\t\t\t\tvisibleRows\n\t\t\t\t, this._configuration.rowIdentifier\n\t\t\t\t, 0\n\t\t\t\t, this._defaultStep * visibleRows.length\n\t\t\t\t, this._configuration.lineWidth\n\t\t\t);\n\n\t\t\tthis._updateRowPositionsAndVisibility(rowScale);\n\n\n\n\t\t\t// Update scales\n\t\t\tthis._colScale = colScale;\n\t\t\tthis._rowScale = rowScale;\n\n\t\t\tconsole.timeEnd('updateData');\n\n\t\t}\n\n\n\n\n\n\n\t\t/**\n\t\t* Updates the row's position and visibility to match filters\n\t\t*/\n\t\t_updateRowPositionsAndVisibility(scale) {\n\n\t\t\tconsole.time('updateRowPos');\n\n\t\t\tconst rowIds = Object.keys(this._elements.rows);\n\t\t\trowIds.forEach((rowId) => {\n\n\t\t\t\tconst pos = scale.getPosition(rowId)\n\t\t\t\t\t, row = this._elements.rows[rowId];\n\n\t\t\t\tif (pos === undefined) {\n\t\t\t\t\trow.style.opacity = 0;\n\t\t\t\t\trow.style.display = 'none';\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\trow.style.opacity = 1;\n\t\t\t\t\trow.style.display = 'block';\n\t\t\t\t\trow.style.transform = `translate(0, ${ pos }px)`;\n\t\t\t\t}\n\n\t\t\t});\n\n\t\t\tconsole.timeEnd('updateRowPos');\n\n\t\t}\n\n\n\n\n\n\n\t\t/**\n\t\t* Updates the col's position and visibility to match filters\n\t\t*/\n\t\t_updateColumnPositionAndVisibility(scale) {\n\n\t\t\tconsole.time('updateColPos');\n\n\t\t\t// Remove all columns that are not visible any more\n\t\t\tconst colIds = Object.keys(this._elements.columns);\n\t\t\tcolIds.forEach((colId) => {\n\n\t\t\t\tconst pos = scale.getPosition(colId);\n\n\t\t\t\t// Not visible any more\n\t\t\t\tif (pos === undefined) {\n\t\t\t\t\tthis._elements.columns[colId].forEach((element) => {\n\t\t\t\t\t\telement.style.opacity = 0;\n\t\t\t\t\t\telement.style.display = 'none';\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\telse {\n\t\t\t\t\tthis._elements.columns[colId].forEach((el) => {\n\t\t\t\t\t\tel.style.opacity = 1;\n\t\t\t\t\t\tel.style.display = 'block';\n\t\t\t\t\t\tel.style.transform = `translate(${ pos }px, 0)`;\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t});\n\n\t\t\tconsole.timeEnd('updateColPos');\n\n\t\t}\n\n\n\n\n\n\n\t\t/**\n\t\t* Main method. Draws the matrix with data and container provided.\n\t\t*/\n\t\t_drawMatrix() {\n\n\n\t\t\t// Create new SVG\n\t\t\tif (!this._elements.svg) {\n\t\t\t\tthis._elements.svg = this._createSVG();\n\t\t\t\tthis._container.append(this._elements.svg);\n\t\t\t}\n\t\t\t// Empty existing SVG\n\t\t\telse {\n\t\t\t\tthis._elements.svg.innerHTML = '';\n\t\t\t}\n\n\t\t\tconst rowLabelMaxWidth\t\t\t= this._getRowLabelMaxWidth();\n\n\n\n\t\t\t// Create scale for columns\n\t\t\tconst left = rowLabelMaxWidth + this._configuration.spaceBetweenLabelsAndMatrix;\n\t\t\t// 50: Save same space for the labels that are rotate by 45deg\n\t\t\tthis._colScale = this._createScale(this._configuration.columnHeaderTransformer(this._data), this._configuration.columnIdentifier, left, this._getSvgWidth() - left - 50, this._configuration.lineWidth);\n\n\t\t\t// Store a «normal» step: \n\t\t\t// When all elements are removed (because filters are too strict), step() will be lost and canot be\n\t\t\t// used any more. But they're required in _updateData to create new scales.\n\t\t\tthis._defaultStep = this._colScale.step();\n\t\t\t\n\t\t\t// Make sure that the row's scale's steps are the same as the col scale's by multiplying data's length with the steps of colScale\n\t\t\t// firstColData contains the first entry of every row\n\t\t\tthis._rowScale = this._createScale(this._data, this._configuration.rowIdentifier, 0, this._data.length * this._colScale.step(), this._configuration.lineWidth);\n\n\t\t\tconsole.log('ResistanceMatrix: SVG width %o, row label max width %o', this._getSvgWidth(), rowLabelMaxWidth);\n\n\n\n\t\t\t// Create all content needed to draw the table\n\t\t\tconst content = [];\n\n\n\n\t\t\t// Create circle <defs>\n\t\t\tconsole.time('createCircleDefs');\n\t\t\tcontent.push(this._createCellCircleDefs(this._colScale.bandwidth()));\n\t\t\tconsole.timeEnd('createCircleDefs');\n\n\n\t\n\t\t\t// Create Column heads\t\t\t\n\t\t\tconsole.time('createColHeads');\n\t\t\tcontent.push(this._createColHeads(\n\t\t\t\tthis._configuration.columnHeaderTransformer(this._data)\n\t\t\t\t, this._configuration.columnLabelValue\n\t\t\t\t, this._configuration.columnIdentifier\n\t\t\t\t, this._colScale\n\t\t\t));\n\t\t\tconsole.timeEnd('createColHeads');\n\n\n\n\t\t\t// Create rows\n\t\t\tconsole.time('createRows');\n\t\t\tcontent.push('<g class=\\'matrix-body\\'>');\n\t\t\tcontent.push(this._createRows(\n\t\t\t\t  this._data\n\t\t\t\t, this._configuration.rowDataTransformer\n\t\t\t\t, this._configuration.rowLabelValue\n\t\t\t\t, this._configuration.rowIdentifier\n\t\t\t\t, this._configuration.columnIdentifier\n\t\t\t\t, this._configuration.cellColorValue\n\t\t\t\t, this._configuration.cellLabelValue\n\t\t\t\t, this._colScale\n\t\t\t\t, this._rowScale\n\t\t\t\t, this._configuration.spaceBetweenLabelsAndMatrix\n\t\t\t));\n\t\t\tcontent.push('</g>');\n\t\t\tconsole.timeEnd('createRows');\n\n\t\t\tconsole.time('addToSVG');\n\t\t\tthis._elements.svg.innerHTML = content.join('');\n\t\t\tconsole.timeEnd('addToSVG');\n\n\n\n\n\t\t\t// Transform column heads (height of them must be known before we can transform them)\n\t\t\tconsole.time('transformColHeads');\n\t\t\tconsole.time('transformColHeadsGetHeight');\n\t\t\tlet maxLabelHeight \t\t\t= document.querySelector('.column-heads').getBoundingClientRect().height;\n\t\t\tconsole.timeEnd('transformColHeadsGetHeight');\n\n\t\t\tconsole.time('transformColHeadsSetPos');\n\t\t\tthis._elements.svg.querySelector('.column-heads').style.transform = `translate(0, ${ maxLabelHeight }px)`;\n\t\t\tconsole.timeEnd('transformColHeadsSetPos');\n\t\t\tconsole.timeEnd('transformColHeads');\n\n\t\t\t// Transform matrix body (move down by height of col labels)\n\t\t\tconsole.time('transformBody');\n\t\t\tthis._elements.svg.querySelector('.matrix-body').style.transform = `translate(0, ${ maxLabelHeight + this._configuration.spaceBetweenLabelsAndMatrix }px)`;\n\t\t\tconsole.timeEnd('transformBody');\n\n\n\n\n\t\t\t// Set height of svg\n\t\t\tconsole.time('svgHeight');\n\t\t\tthis._elements.svg.style.height = maxLabelHeight + this._configuration.spaceBetweenLabelsAndMatrix + this._rowScale.step() * this._data.length;\n\t\t\tconsole.timeEnd('svgHeight');\n\n\n\n\n\t\t\t// Cache cols and rows for faster animations (only read from DOM once)\n\t\t\tconsole.time('storeDomElements');\n\n\t\t\t// Objects with key: identifier and value: DOM element resp. [DOM element] for columns (as every column is made up\n\t\t\t// of different cells)\n\t\t\tthis._elements.rows = {};\n\t\t\tthis._elements.columns = {};\n\n\t\t\tconst rows = this._elements.svg.querySelectorAll('.matrix-row');\n\t\t\tArray.from(rows).forEach((row) => {\n\t\t\t\tthis._elements.rows[row.getAttribute('data-identifier')] = row;\n\t\t\t});\n\n\t\t\t// Cols: Use all cells and column heads\n\t\t\tconst cells = this._elements.svg.querySelectorAll('.matrix-cell, .matrix-column-head');\n\t\t\tArray.from(cells).forEach((cell) => {\n\t\t\t\tconst identifier = cell.getAttribute('data-column-identifier');\n\t\t\t\tif (!this._elements.columns[identifier]) {\n\t\t\t\t\tthis._elements.columns[identifier] = [cell];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis._elements.columns[identifier].push(cell);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconsole.timeEnd('storeDomElements');\n\t\t\tconsole.log('ResistanceMatrix: Rows are %o, cols %o', this._elements.rows, this._elements.columns);\n\n\n\n\n\n\t\t\t// Hovering\n\t\t\tconst body = this._elements.svg.querySelector('.matrix-body');\n\t\t\tthis._hoveredMatrixCell = undefined;\n\t\t\tthis._elements.mouseOver = this._createEmptyMouseOverCell(this._colScale.bandwidth());\n\t\t\tbody.appendChild(this._elements.mouseOver);\n\n\t\t\t// Event handler (mouseover). Don't attach an mouseenter listener to every single cell, \n\t\t\t// but use a global listener to improve performance\n\t\t\tbody.addEventListener('mouseover', (ev) => this._mouseOverHandler(ev));\n\t\t\tbody.addEventListener('mouseleave', () => {\n\t\t\t\tthis._elements.mouseOver.style.opacity = 0;\n\t\t\t\tthis._hoveredMatrixCell = undefined;\n\t\t\t});\n\n\n\t\t}\n\n\n\n\n\n\n\n\t\t_mouseOverHandler(ev) {\n\n\t\t\t// Get hovered cell (class .matrix-cell)\n\t\t\tlet target = ev.target;\n\t\t\twhile (!target.classList.contains('matrix-cell') && target.parentNode) {\n\t\t\t\ttarget = target.parentNode;\n\t\t\t}\n\n\t\t\t// Hovered cell did not change\n\t\t\tif (this._hoveredMatrixCell === target) return;\n\n\t\t\t// Update _hoveredMatrixCell\n\t\t\tthis._hoveredMatrixCell = target;\n\n\t\t\tthis._updateMouseOverCell(target);\n\n\t\t}\n\n\n\n\n\t\t_updateMouseOverCell(hoveredCell) {\n\n\t\t\tconst rowIdentifier = hoveredCell.getAttribute('data-row-identifier');\n\t\t\tconst colIdentifier = hoveredCell.getAttribute('data-column-identifier');\n\t\t\t//console.log('ResistanceMatrix: Create mouse over cell for %o, col %o row %o', hoveredCell, colIdentifier, rowIdentifier);\n\t\t\tconst mouseOver = this._elements.mouseOver;\n\t\t\tmouseOver.style.transform = `translate(${ this._colScale.getPosition(colIdentifier) }px, ${ this._rowScale.getPosition(rowIdentifier) }px)`;\n\t\t\tmouseOver.style.opacity = 1;\n\t\t\tmouseOver.querySelector('text').textContent = hoveredCell.querySelector('text').textContent;\n\t\t\tmouseOver.querySelector('circle').setAttribute('fill', hoveredCell.querySelector('use').getAttribute('fill'));\n\n\n\n\t\t}\n\n\n\t\t/**\n\t\t* Creates and returns the mouse over (focused) cell as a <g>. Must be a DOM element in \n\t\t* order to be appendable to SVG.\n\t\t*/\n\t\t_createEmptyMouseOverCell(cellDimensions) {\n\n\t\t\tconst radius = Math.round(cellDimensions / 2 + 25);\n\n\t\t\tconst g = document.createElementNS(this._svgNS, 'g');\n\t\t\tg.classList.add('mouse-over-cell');\n\t\t\tg.style.pointerEvents = 'none';\n\t\t\tg.style.opacity = 0;\n\t\t\tg.setAttribute('x', 0);\n\t\t\tg.setAttribute('y', 0);\n\t\t\tg.style.cursor = 'pointer';\n\n\t\t\t// dy = -1em aligns text at top; -1.5 centers top\n\t\t\tg.innerHTML = `\n\t\t\t\t<circle style='cursor:pointer' r='${ radius }'></circle>\n\t\t\t\t<text  style='cursor:pointer' text-anchor='middle' alignment-baseline='central' x='0' y='0'></text>\n\t\t\t`;\n\n\t\t\treturn g;\n\n\t\t}\n\n\n\n\n\t\t/**\n\t\t* Returns (rounded) width of \n\t\t*/\n\t\t_getRowLabelMaxWidth() {\n\n\t\t\tconsole.time('getRowLabelMaxWidth');\n\n\t\t\t// Create rows with labels\n\t\t\tconst rows = [];\n\t\t\t// Fake row scale as we don't just care at this moment\n\t\t\tconst rowScale = this._createScale(this._data, (item) => item, 0, 0, 0);\n\t\t\tthis._data.forEach((row) => {\n\t\t\t\trows.push(this._createRow(this._createRowLabel(this._configuration.rowLabelValue(row), rowScale, 0), this._configuration.rowIdentifier(row), rowScale));\n\t\t\t});\n\n\t\t\t// Append labels to <g>, then to SVG\n\t\t\tconst g = document.createElementNS(this._svgNS, 'g');\n\t\t\tg.innerHTML = rows.join('');\n\t\t\tthis._elements.svg.appendChild(g);\n\n\t\t\t// Go through labels\n\t\t\tlet maxWidth = g.getBoundingClientRect().width;\n\n\t\t\t// Re-set to previous state (remove g)\n\t\t\tthis._elements.svg.removeChild(g);\n\n\t\t\tconsole.timeEnd('getRowLabelMaxWidth');\n\n\t\t\treturn Math.ceil(maxWidth);\n\n\t\t}\n\n\n\n\n\t\t/**\n\t\t* Creates and returns a scale  which takes an identifier of a column and returns the corresponding position on the \n\t\t* x axis. Needed to simplify things as some cells may be missing.\n\t\t*/\n\t\t_createScale(values, identifierFunction, offset, width, lineWidth) {\n\n\t\t\tconsole.log('ResistanceMatrix: Create scale for values %o, starts at %o, ends at %o, line width %o', values, offset, width, lineWidth);\n\t\t\t// Holds position for item (key is item, value is position)\n\t\t\tconst positions = {};\n\t\t\t// Step: Space between one col and the next\n\t\t\tconst step = Math.floor((width)/values.length);\n\t\t\tconst bandwidth = step - lineWidth;\n\t\t\tvalues.forEach((item, index) => {\n\t\t\t\tpositions[identifierFunction(item)] = index * step + offset;\n\t\t\t});\n\t\t\tconsole.log('ResistanceMatrix: Created scale for %o', positions);\n\t\t\treturn {\n\t\t\t\tgetPosition\t\t: (item) => positions[item]\n\t\t\t\t, bandwidth\t\t: () => bandwidth\n\t\t\t\t, lineWidth\t\t: () => lineWidth\n\t\t\t\t, step\t\t\t: () => step\n\t\t\t\t, offset\t\t: () => offset\n\t\t\t};\n\n\t\t}\n\n\n\t\t/**\n\t\t* Creates a single row label\n\t\t*/\n\t\t_createRowLabel(value, scale, indentation) {\n\n\t\t\treturn `<text class='row-label' text-anchor='end' y='${ scale.bandwidth() / 2 }' dy='-0.7em' x='${ indentation }'>\n\t\t\t\t\t${ value }\n\t\t\t\t</text>`;\n\n\t\t}\n\n\n\t\t/**\n\t\t* Creates a single row with content and identifier given. Needed to \n\t\t* a) measure the row label's width\n\t\t* b) draw the final matrix\n\t\t*/\n\t\t_createRow(content, identifier, rowScale) {\n\n\t\t\treturn `\n\t\t\t\t<g class='matrix-row' data-identifier='${ identifier }' style='transform:translate(0, ${ rowScale.getPosition(identifier) }px)'>\n\t\t\t\t\t${ content }\n\t\t\t\t</g>`.replace(/[\\n\\r]/g, '');\n\n\t\t}\n\n\n\n\t\t/**\n\t\t* Creates all rows\n\t\t*/\n\t\t_createRows(data, transformer, valueFunction, rowIdentifierFunction, columnIdentifier, colorValue, labelValue,  colScale, rowScale, spaceBetweenLabelsAndMatrix) {\n\t\t\t\n\t\t\tconsole.log('ResistanceMatrix: Draw rows with data %o, transformer %o, value %o, identifier %o, scale %o', data, transformer, valueFunction, rowIdentifierFunction, colScale);\t\n\n\t\t\tconst rows = [];\n\t\t\tdata.forEach((rowData) => {\n\t\t\t\tconst label = this._createRowLabel(valueFunction(rowData), rowScale, colScale.offset() - spaceBetweenLabelsAndMatrix);\n\t\t\t\tconst cells = this._createCellsForRow(transformer(rowData), columnIdentifier, rowIdentifierFunction(rowData), colorValue, labelValue, colScale);\n\t\t\t\trows.push(this._createRow(label + cells, rowIdentifierFunction(rowData), rowScale));\n\t\t\t});\n\t\t\treturn rows.join('');\n\n\t\t}\n\n\n\n\t\t/**\n\t\t* Creates a set of cells for a certain row\n\t\t*/\n\t\t_createCellsForRow(data, columnIdentifierFunction, rowIdentifier, colorValue, labelValue, scale) {\n\t\t\tconst cells = [];\n\t\t\tdata.forEach((cellDatum) => {\n\n\t\t\t\t// Empty label: Don't draw\n\t\t\t\tif (labelValue(cellDatum) === undefined) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// y position: Go down by half of the circle's size, then up by half the font's size – should be \n\t\t\t\t// vertically aligned in the middle\n\t\t\t\tcells.push(`\n\t\t\t\t\t<g class='matrix-cell' style='transform:translate(${ scale.getPosition(columnIdentifierFunction(cellDatum)) }px,0)' data-column-identifier='${ columnIdentifierFunction(cellDatum) }' data-row-identifier='${ rowIdentifier }'>\n\t\t\t\t\t\t<use xlink:href='#cell-circle-def' fill='${ colorValue(cellDatum) }'></use>\n\t\t\t\t\t\t<text text-anchor='middle' x='0' y='0' alignment-baseline='central'>${ labelValue(cellDatum) }</text>\n\t\t\t\t\t</g>\n\t\t\t\t`);\n\t\t\t});\n\t\t\treturn cells.join('');\n\t\t}\n\n\n\n\t\t/**\n\t\t* Creates all column heads including the wrapping <g>\n\t\t*/\n\t\t_createColHeads(data, textFunction, identifierFunction, scale) {\n\t\t\tconsole.log('ResistanceMatrix: Create col heads with data %o, text %o, identifier %o, space %o', data, textFunction, identifierFunction, scale);\n\t\t\tconst heads = [];\n\t\t\theads.push(`<g class='column-heads'>`);\n\t\t\tdata.forEach((head) => {\n\t\t\t\theads.push(this._createColHead(textFunction(head), identifierFunction(head), scale.getPosition(identifierFunction(head))));\n\t\t\t});\n\t\t\theads.push('</g>');\n\t\t\treturn heads.join('');\n\t\t}\n\n\n\n\t\t/**\n\t\t* Creates a single column head\n\t\t*/\n\t\t_createColHead(value, identifier, left) {\n\t\t\treturn `\n\t\t\t\t<g class='matrix-column-head' data-column-identifier='${ identifier }' style='transform: translate(${ left }px, 0)'>\n\t\t\t\t\t<text style='transform:rotate(-45deg)'>${ value }</text>\n\t\t\t\t</g>\n\t\t\t`;\n\t\t}\n\n\n\n\t\t/**\n\t\t* Creates the definitions for the circles in a cell. \n\t\t*/\n\t\t_createCellCircleDefs(dimensions) {\n\n\t\t\tconst roundedRadius = Math.floor(dimensions / 2);\n\n\t\t\treturn `\n\t\t\t\t<defs>\n\t\t\t\t\t<circle id='cell-circle-def' r='${ roundedRadius }' fill='inherit' stroke-width='inherit' stroke='inherit'></circle>\n\t\t\t\t</defs>\n\t\t\t`;\n\n\t\t}\n\n\n\n\t\t/**\n\t\t* Returns the SVG's width \n\t\t* @return {Number}\n\t\t*/\n\t\t_getSvgWidth() {\n\t\t\treturn this._elements.svg.getBoundingClientRect().width;\n\t\t}\n\n\n\n\t\t/**\n\t\t* Creates and returns a single row label. Needed to first measure and then\n\t\t* draw it at the right place\n\t\t*/\n\t\t_createSingleRowLabel(element) {\n\n\t\t\treturn element\n\t\t\t\t.append('text')\n\t\t\t\t.attr('class', 'row-label')\n\t\t\t\t.attr('text-anchor', 'end')\n\t\t\t\t.text(this._configuration.rowLabelValue);\n\n\t\t}\n\n\n\t\t/**\n\t\t* Creates and returns the SVG\n\t\t*/\n\t\t_createSVG() {\n\n\t\t\tconst svg = document.createElementNS(this._svgNS, 'svg');\n\t\t\treturn svg;\n\n\t\t}\n\n\n\t}\n\n\twindow.infect = window.infect || {};\n\twindow.infect.ResistanceMatrix = ResistanceMatrix;\n\n})();\n\n"]}